Конфигурация
git config --global user.name Sergei (задать имя пользователя при старте использования)
git config --global user.email tamto@tut.com (задать email пользователя при старте использования)
git config --global color.ui auto (автоподстветка на вывод в терминале (цвета желтый , красный и т.д. в отличии от сообщения)
git config --global core.editor nazvanie)redactora установка текстового редактора по умолчанию 


git config --list (список конфигураций)




Стандартные команды Windows

ls (показать список файлов)
cd (сменить папку) ~ - директория в которой лежит консоль    .. -вверх на одну ступень по иерархии папок   ../.. -вверх на две ступени по иерархии папок
mkdir (создать папку)
touch takoyto.txt(создать фаил)
cp takoyto.txt new_takoyto.txt (копируем фаил в новый фаил)
mv takoyto.txt new_takoyto.txt (перемещаем (move) (в данном примере переименовывем) фаил в новый фаил)
echo "Hello" (простой вывод на экран)
echo "Hello" > takoyto.txt (записываем Hello в фаил takoyto.txt)
cat takoyto.txt (посмотреть содержание файла)
rm takoyto.txt (удалить фаил)
rm -R imya_directorii (удалить папку целиком)



Основные команды GIT
git init (сделать репозиторий в текущей папке)
git status (проверить состояние текущей ветки репозитория)
git remote add origin ssylka_na_istochnik (синхронизируем(подключаем) локальный репозиторий с удаленным)
git remote -v (показат список подключенных удаленных репозиториев)

git add imya_fayla (добвляет фаил в будущий коммит, что бьы проверить какие изменения не пормечены в комит использовать git status)
git add . (Учитывает будущий коммит все неучтенные файлы)
git rm --cached imya_fayla (удалить из списка будующего комита)
git restore imya_fayla (отменить изменения в рабочей папке)
git commit (Сделать коммит в репозиторий (внеми ную информацию))
Откроется редактор , нажать i что бы сделать комментарий к записи, потом нажать Esc и прописать :wq (записить коммита и выход из редактора)
git commit -m 'KOMMENTARIY' (Сделать коммит и в кавычка сразу указать комментарий)
git commit -a (коммит сразу добавляетт все не добавленные в статусе фалы без git add команды)
git commit -am 'KOMMENTARIY'(коммит сразу добавляетт все не добавленные в статусе фалы без git add команды. Так же можно сразу указать комментарий)
git push (скопировать коммиты в удаленный репозиторий)
git push -u origin IMYA_NOVOY_UDALENNOY_VETKI (Первая отправка ветки в удаленный репозиторий)
git push --force (Скопировать коммиты в удаленный репозиторий, не смотря на предупреждения)
git pull (скопировать коммитый из удаленного репозитория)

.gitkeep (создание файла с таким расширением и пустым именем позволит заносить в коммиты пустые папки)
.gitignore (создание файла с таким расширением и пустым именем позволит игнорировать папку и изменения в ней для отображения в gitstatus и избежать занения этой папки в коммиты)



История репозитория
git log (Показывает лог репозитория)
git log --oneline (вывести сокращенную историю, каждая запись в одну строку)

git reset nomer_hesh_NA_KOTORIY_hotim_vernutsya (возврат в другой коммит (назад))
git reflog (более подробный лог с историем удалений коммитов и остальных операций, что бы вернуть удаление нужно взять его ХЭШ из git reflog и использовать в git reset)
git revert hash_number (новый комит, который отменяет действие предыдущего (возвращает на шаг после указанного ХЭША))
git restore imya_fayla (сбросить состояние файла  в состояние, в котором был фаил в последнем коммите (если имя файла с пробелами - использовать ковычки))


Работа с ветками
git branch (посмотреть доступные ветки) (Если не переключиться наветку после создания ее не будет видно в git branch . Стоит использовать git checkout -b imya_vetki  для одновременного создания и переключения)
git branch imya_vetki (сделать ветку) 
git chechout imya_vetki (перейти на ветку) 
git branch imya_vetki imya_vetki_starta (Создание ветки со стоартовой точкой новой ветки , отличной от той, где сейчас находишься ты (указывается вторым параметром имени))
git checkout -b imya_vetki (Сделать ветку и сразу переключиться на нее)

git commit --amend -m "NOVOYE_NAZVANIYE" (Переименовать последний коммит)
git commit --amend -c GASH_COMMITA (Переименовать имя комита через редактор)

git fetch (История изменений веток в УДАЛЕННОМ репозитории)
git merge VTORAYA_VETKA (VTORAYA_VETKA переносит свои коммиты (но ветка все еще актуальна) с той, на которой сейчас находится HEAD/консоль (НУЖНО становиться на ветку , на которую хотим принять коммиты даже в GIT KRAKEN))
git branch -d IMYA_VETKI (удаление ветки)
git push --delete origin IMYA_VETKI (удаление ветки из удаленного репозитория)
git rebase IMYA_VETKI_KUDA_HOTIM_PERENESTI (Изменение старта самой ветки (СТОИМ НА той ветку КОТОРУЮ переносим))


















